////////////////////////////////////////////////////////////////////////
//
// MicrowaveOvenController.java
//
// This file was generated by UModel 2022r2 Enterprise Edition
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the UModel Documentation for further details.
// http://www.altova.com/umodel
//
////////////////////////////////////////////////////////////////////////
package MicrowaveOven;

import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import javax.swing.Action;

public abstract class MicrowaveOvenController
{
	public enum TStateId
	{
		MicrowaveOven_Root,
		MicrowaveOven_Region1_Ready,
		MicrowaveOven_Region1_Init,
		MicrowaveOven_Region1_Active,
		MicrowaveOven_Region1_Suspended,
		MicrowaveOven_Region1_Open
	}

	public interface IState
	{
		String getName();
		TStateId getId();
		IRegion[] getRegions();
	}

	public interface IRegion
	{
		String getName();
		IState[] getStates();
		IState getCurrentState();
	}

	// get the Root State
	public IState getRootState() {
		return _getRootState();
	}
	public IState getCurrentTopLevelState() {
		return getRootState().getRegions()[0].getCurrentState();
	}

	// Initialize the State Machine
	public void Initialize() {
		OnDebugMessage( "BEGIN_INITIALIZE" );
		MicrowaveOven_Region1_Ready = new CMicrowaveOven.Region1.Ready(this);
		MicrowaveOven_Region1_Init = new CMicrowaveOven.Region1.Init(this);
		MicrowaveOven_Region1_Active = new CMicrowaveOven.Region1.Active(this);
		MicrowaveOven_Region1_Suspended = new CMicrowaveOven.Region1.Suspended(this);
		MicrowaveOven_Region1_Open = new CMicrowaveOven.Region1.Open(this);

		rootState = new CMicrowaveOven(this);

		CMicrowaveOven.Region1.setCurrentState(this, CMicrowaveOven.Region1.getInitState(this));
		OnDebugMessage( "END_INITIALIZE" );
	}

	// get all possible call event actions
	public Action[] getCallEvents() {
		return new Action[] {
			new AbstractAction("button_start_time") {
				public void actionPerformed(ActionEvent e) {
					button_start_time();
				}
			},
			new AbstractAction("button_stop") {
				public void actionPerformed(ActionEvent e) {
					button_stop();
				}
			},
			new AbstractAction("count_down") {
				public void actionPerformed(ActionEvent e) {
					count_down();
				}
			},
			new AbstractAction("door_open_close") {
				public void actionPerformed(ActionEvent e) {
					door_open_close();
				}
			}
		};
	}

	// call event method implementations
	public boolean button_start_time() {
		OnDebugMessage("BEGIN_EVENT: button_start_time");
		boolean bHandled = _getRootState().button_start_time();
		OnDebugMessage("END_EVENT: button_start_time");
		return bHandled;
	}
	public boolean button_stop() {
		OnDebugMessage("BEGIN_EVENT: button_stop");
		boolean bHandled = _getRootState().button_stop();
		OnDebugMessage("END_EVENT: button_stop");
		return bHandled;
	}
	public boolean count_down() {
		OnDebugMessage("BEGIN_EVENT: count_down");
		boolean bHandled = _getRootState().count_down();
		OnDebugMessage("END_EVENT: count_down");
		return bHandled;
	}
	public boolean door_open_close() {
		OnDebugMessage("BEGIN_EVENT: door_open_close");
		boolean bHandled = _getRootState().door_open_close();
		OnDebugMessage("END_EVENT: door_open_close");
		return bHandled;
	}

	// Overwrite to handle entry/exit/do actions, transition effects,...:
	public void light_off() {OnDebugMessage("ACTION: light_off");}
	public void heater_off() {OnDebugMessage("ACTION: heater_off");}
	public void light_on() {OnDebugMessage("ACTION: light_on");}
	public void heater_on() {OnDebugMessage("ACTION: heater_on");}
	public void add_time() {OnDebugMessage("ACTION: add_time");}
	public void sub_time() {OnDebugMessage("ACTION: sub_time");}
	public void open_door() {OnDebugMessage("ACTION: open_door");}
	public void close_door() {OnDebugMessage("ACTION: close_door");}
	public void rst_time() {OnDebugMessage("ACTION: rst_time");}

	// Overwrite to handle debug messages:
	public void OnDebugMessage(String str) {
	}

	// Additional defined operations of the controller class:
	public abstract MicrowaveOvenModel getMicrowave_oven_model();

	// Additional defined attributes of the controller class:
	protected static MicrowaveOvenModel microwave_oven_model = new MicrowaveOvenModel();


	// Implementation for StateMachine 'MicrowaveOven'
	private static class CMicrowaveOven implements IState
	{
		private MicrowaveOvenController context;

		public CMicrowaveOven(MicrowaveOvenController context) {
			this.context = context;
		}
		public String getName() {
			return "MicrowaveOven";
		}
		public TStateId getId() {
			return TStateId.MicrowaveOven_Root;
		}
		public IRegion[] getRegions() {
			return new IRegion[] {
				new Region1(context)
			};
		}
		public boolean button_start_time() {
			return Region1.getCurrentState(context).button_start_time();
		}
		public boolean button_stop() {
			return Region1.getCurrentState(context).button_stop();
		}
		public boolean count_down() {
			return Region1.getCurrentState(context).count_down();
		}
		public boolean door_open_close() {
			return Region1.getCurrentState(context).door_open_close();
		}

		// Implementation for Region 'Region1'
		public static class Region1 implements IRegion
		{
			private MicrowaveOvenController context;

			public Region1(MicrowaveOvenController context) {
				this.context = context;
			}
			public String getName() {
				return "Region1";
			}
			public IState[] getStates() {
				 return new IState[] {
					new Ready(context),
					new Init(context),
					new Active(context),
					new Suspended(context),
					new Open(context)
				};
			}
			public IState getCurrentState() {
				return getCurrentState(context);
			}
			public static Region1State getCurrentState(MicrowaveOvenController context) {
				return context._getRootState().svRegion1;
			}
			public static void setCurrentState(MicrowaveOvenController context, Region1State state) {
				context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() );
				context._getRootState().svRegion1 = state;
				context._getRootState().svRegion1.entryState();
			}
			public static Region1State getInitState(MicrowaveOvenController context) {
				return context.MicrowaveOven_Region1_Init;
			}

			// Base class for all states of Region 'Region1'
			public static abstract class Region1State implements IState
			{
				protected MicrowaveOvenController context;
				public boolean button_start_time() {return false;}
				public boolean button_stop() {return false;}
				public boolean count_down() {return false;}
				public boolean door_open_close() {return false;}
				public void entryState() {}
			}

			// Implementation for State 'Ready'
			public static class Ready extends Region1State
			{
				public Ready(MicrowaveOvenController context) {
					this.context = context;
				}
				@Override
				public String getName() {
					return "Ready";
				}
				@Override
				public TStateId getId() {
					return TStateId.MicrowaveOven_Region1_Ready;
				}
				@Override
				public IRegion[] getRegions() {
					return new IRegion[] {
					};
				}
				@Override
				public boolean button_start_time() {
					// Handle Ready ---> Active
					context.OnDebugMessage( "TRANSITION: Ready ---> Active");
					context.add_time(); // Handle effect of transition Ready ---> Active
					CMicrowaveOven.Region1.setCurrentState(context, context.MicrowaveOven_Region1_Active);
					return true;
				}
				@Override
				public boolean door_open_close() {
					// Handle Ready ---> Open
					context.OnDebugMessage( "TRANSITION: Ready ---> Open");
					context.open_door(); // Handle effect of transition Ready ---> Open
					CMicrowaveOven.Region1.setCurrentState(context, context.MicrowaveOven_Region1_Open);
					return true;
				}
				@Override
				public void entryState() {
					context.light_off();
					context.heater_off();
				}
			}

			// Implementation for State 'Init'
			public static class Init extends Region1State
			{
				public Init(MicrowaveOvenController context) {
					this.context = context;
				}
				@Override
				public String getName() {
					return "Init";
				}
				@Override
				public TStateId getId() {
					return TStateId.MicrowaveOven_Region1_Init;
				}
				@Override
				public IRegion[] getRegions() {
					return new IRegion[] {
					};
				}
				@Override
				public boolean count_down() {
					if (microwave_oven_model.getTime()==0 && microwave_oven_model.isLight()==false && microwave_oven_model.isHeater()==false &&  microwave_oven_model.isDoor_open()==false) {
						// Handle Init ---> Ready
						context.OnDebugMessage( "TRANSITION: Init ---> Ready");
						CMicrowaveOven.Region1.setCurrentState(context, context.MicrowaveOven_Region1_Ready);
						return true;
					}
					return false;
				}
			}

			// Implementation for State 'Active'
			public static class Active extends Region1State
			{
				public Active(MicrowaveOvenController context) {
					this.context = context;
				}
				@Override
				public String getName() {
					return "Active";
				}
				@Override
				public TStateId getId() {
					return TStateId.MicrowaveOven_Region1_Active;
				}
				@Override
				public IRegion[] getRegions() {
					return new IRegion[] {
					};
				}
				@Override
				public boolean button_start_time() {
					// Handle Active ---> Active
					context.OnDebugMessage( "TRANSITION: Active ---> Active");
					context.add_time(); // Handle effect of transition Active ---> Active
					CMicrowaveOven.Region1.setCurrentState(context, context.MicrowaveOven_Region1_Active);
					return true;
				}
				@Override
				public boolean button_stop() {
					// Handle Active ---> Ready
					context.OnDebugMessage( "TRANSITION: Active ---> Ready");
					context.rst_time(); // Handle effect of transition Active ---> Ready
					CMicrowaveOven.Region1.setCurrentState(context, context.MicrowaveOven_Region1_Ready);
					return true;
				}
				@Override
				public boolean count_down() {
					if (microwave_oven_model.getTime()>0) {
						// Handle Active ---> Active
						context.OnDebugMessage( "TRANSITION: Active ---> Active");
						context.sub_time(); // Handle effect of transition Active ---> Active
						CMicrowaveOven.Region1.setCurrentState(context, context.MicrowaveOven_Region1_Active);
						return true;
					}
					else if (microwave_oven_model.getTime()==0) {
						// Handle Active ---> Ready
						context.OnDebugMessage( "TRANSITION: Active ---> Ready");
						CMicrowaveOven.Region1.setCurrentState(context, context.MicrowaveOven_Region1_Ready);
						return true;
					}
					return false;
				}
				@Override
				public boolean door_open_close() {
					// Handle Active ---> Suspended
					context.OnDebugMessage( "TRANSITION: Active ---> Suspended");
					context.open_door(); // Handle effect of transition Active ---> Suspended
					CMicrowaveOven.Region1.setCurrentState(context, context.MicrowaveOven_Region1_Suspended);
					return true;
				}
				@Override
				public void entryState() {
					context.light_on();
					context.heater_on();
				}
			}

			// Implementation for State 'Suspended'
			public static class Suspended extends Region1State
			{
				public Suspended(MicrowaveOvenController context) {
					this.context = context;
				}
				@Override
				public String getName() {
					return "Suspended";
				}
				@Override
				public TStateId getId() {
					return TStateId.MicrowaveOven_Region1_Suspended;
				}
				@Override
				public IRegion[] getRegions() {
					return new IRegion[] {
					};
				}
				@Override
				public boolean button_stop() {
					// Handle Suspended ---> Open
					context.OnDebugMessage( "TRANSITION: Suspended ---> Open");
					context.rst_time(); // Handle effect of transition Suspended ---> Open
					CMicrowaveOven.Region1.setCurrentState(context, context.MicrowaveOven_Region1_Open);
					return true;
				}
				@Override
				public boolean door_open_close() {
					// Handle Suspended ---> Active
					context.OnDebugMessage( "TRANSITION: Suspended ---> Active");
					context.close_door(); // Handle effect of transition Suspended ---> Active
					CMicrowaveOven.Region1.setCurrentState(context, context.MicrowaveOven_Region1_Active);
					return true;
				}
				@Override
				public void entryState() {
					context.heater_off();
				}
			}

			// Implementation for State 'Open'
			public static class Open extends Region1State
			{
				public Open(MicrowaveOvenController context) {
					this.context = context;
				}
				@Override
				public String getName() {
					return "Open";
				}
				@Override
				public TStateId getId() {
					return TStateId.MicrowaveOven_Region1_Open;
				}
				@Override
				public IRegion[] getRegions() {
					return new IRegion[] {
					};
				}
				@Override
				public boolean door_open_close() {
					// Handle Open ---> Ready
					context.OnDebugMessage( "TRANSITION: Open ---> Ready");
					context.close_door(); // Handle effect of transition Open ---> Ready
					CMicrowaveOven.Region1.setCurrentState(context, context.MicrowaveOven_Region1_Ready);
					return true;
				}
				@Override
				public void entryState() {
					context.light_on();
				}
			}
		}
		private Region1.Region1State svRegion1; // State Variable for Region 'Region1'

	}

	// Internal Definitions and Implementations

	// Root State Definition
	private CMicrowaveOven rootState = null;
	private CMicrowaveOven _getRootState() {
		if(rootState == null)
			Initialize();

		return rootState;
	}

	// State Variable Definitions
	private CMicrowaveOven.Region1.Ready MicrowaveOven_Region1_Ready = null;
	private CMicrowaveOven.Region1.Init MicrowaveOven_Region1_Init = null;
	private CMicrowaveOven.Region1.Active MicrowaveOven_Region1_Active = null;
	private CMicrowaveOven.Region1.Suspended MicrowaveOven_Region1_Suspended = null;
	private CMicrowaveOven.Region1.Open MicrowaveOven_Region1_Open = null;
}